import KanaFlag.ADD_DOUBLE_CONSONANT

val HIRAGANA_MAPPINGS: PrefixTree = KanaTreeBuilder(sokuon = "„Å£").apply {
    // Only k, s, t, and p constants get doubled (possibly with rare exceptions)

    put("a", "„ÅÇ")
    put("i", "„ÅÑ")
    put("u", "„ÅÜ")
    put("e", "„Åà")
    put("o", "„Åä")
    put("ka", "„Åã", ADD_DOUBLE_CONSONANT)
    put("ki", "„Åç", ADD_DOUBLE_CONSONANT)
    put("ku", "„Åè", ADD_DOUBLE_CONSONANT)
    put("ke", "„Åë", ADD_DOUBLE_CONSONANT)
    put("ko", "„Åì", ADD_DOUBLE_CONSONANT)
    put("kya", "„Åç„ÇÉ", ADD_DOUBLE_CONSONANT)
    put("kyu", "„Åç„ÇÖ", ADD_DOUBLE_CONSONANT)
    put("kyo", "„Åç„Çá", ADD_DOUBLE_CONSONANT)
    put("sa", "„Åï", ADD_DOUBLE_CONSONANT)
    put("shi", "„Åó", ADD_DOUBLE_CONSONANT)
    put("su", "„Åô", ADD_DOUBLE_CONSONANT)
    put("se", "„Åõ", ADD_DOUBLE_CONSONANT)
    put("so", "„Åù", ADD_DOUBLE_CONSONANT)
    put("sha", "„Åó„ÇÉ", ADD_DOUBLE_CONSONANT)
    put("shu", "„Åó„ÇÖ", ADD_DOUBLE_CONSONANT)
    put("sho", "„Åó„Çá", ADD_DOUBLE_CONSONANT)
    put("ta", "„Åü", ADD_DOUBLE_CONSONANT)
    put("chi", "„Å°", ADD_DOUBLE_CONSONANT)
    put("tsu", "„Å§", ADD_DOUBLE_CONSONANT)
    put("te", "„Å¶", ADD_DOUBLE_CONSONANT)
    put("to", "„Å®", ADD_DOUBLE_CONSONANT)
    put("cha", "„Å°„ÇÉ", ADD_DOUBLE_CONSONANT)
    put("chu", "„Å°„ÇÖ", ADD_DOUBLE_CONSONANT)
    put("cho", "„Å°„Çá", ADD_DOUBLE_CONSONANT)
    put("na", "„Å™")
    put("ni", "„Å´")
    put("nu", "„Å¨")
    put("ne", "„Å≠")
    put("no", "„ÅÆ")
    put("nya", "„Å´„ÇÉ")
    put("nyu", "„Å´„ÇÖ")
    put("nyo", "„Å´„Çá")
    put("ha", "„ÅØ")
    put("hi", "„Å≤")
    put("fu", "„Åµ")
    put("he", "„Å∏")
    put("ho", "„Åª")
    put("hya", "„Å≤„ÇÉ")
    put("hyu", "„Å≤„ÇÖ")
    put("hyo", "„Å≤„Çá")
    put("ma", "„Åæ")
    put("mi", "„Åø")
    put("mu", "„ÇÄ")
    put("me", "„ÇÅ")
    put("mo", "„ÇÇ")
    put("mya", "„Åø„ÇÉ")
    put("myu", "„Åø„ÇÖ")
    put("myo", "„Åø„Çá")
    put("ya", "„ÇÑ")
    put("yu", "„ÇÜ")
    put("yo", "„Çà")
    put("ra", "„Çâ")
    put("ri", "„Çä")
    put("ru", "„Çã")
    put("re", "„Çå")
    put("ro", "„Çç")
    put("rya", "„Çä„ÇÉ")
    put("ryu", "„Çä„ÇÖ")
    put("ryo", "„Çä„Çá")
    put("wa", "„Çè")
    put("wo", "„Çí")
    put("ga", "„Åå")
    put("gi", "„Åé")
    put("gu", "„Åê")
    put("ge", "„Åí")
    put("go", "„Åî")
    put("gya", "„Åé„ÇÉ")
    put("gyu", "„Åé„ÇÖ")
    put("gyo", "„Åé„Çá")
    put("za", "„Åñ")
    put("ji", "„Åò")
    put("zu", "„Åö")
    put("ze", "„Åú")
    put("zo", "„Åû")
    put("ja", "„Åò„ÇÉ")
    put("ju", "„Åò„ÇÖ")
    put("jo", "„Åò„Çá")
    put("da", "„Å†")
    put("de", "„Åß")
    put("do", "„Å©")
    put("ba", "„Å∞")
    put("bi", "„Å≥")
    put("bu", "„Å∂")
    put("be", "„Åπ")
    put("bo", "„Åº")
    put("bya", "„Å≥„ÇÉ")
    put("byu", "„Å≥„ÇÖ")
    put("byo", "„Å≥„Çá")
    put("pa", "„Å±", ADD_DOUBLE_CONSONANT)
    put("pi", "„Å¥", ADD_DOUBLE_CONSONANT)
    put("pu", "„Å∑", ADD_DOUBLE_CONSONANT)
    put("pe", "„Å∫", ADD_DOUBLE_CONSONANT)
    put("po", "„ÅΩ", ADD_DOUBLE_CONSONANT)
    put("pya", "„Å¥„ÇÉ", ADD_DOUBLE_CONSONANT)
    put("pyu", "„Å¥„ÇÖ", ADD_DOUBLE_CONSONANT)
    put("pyo", "„Å¥„Çá", ADD_DOUBLE_CONSONANT)
    put("n", "„Çì")

    // "duplicates"
    put("zu", "„Å•")
    put("ji", "„Å¢")
    put("ja", "„Å¢„ÇÉ")
    put("ju", "„Å¢„ÇÖ")
    put("jo", "„Å¢„Çá")
}.build()

val KATAKANA_MAPPINGS = KanaTreeBuilder("„ÉÉ").apply {
    put("", "„Ç¢")
    put("", "„Ç§")
    put("", "„Ç¶")
    put("", "„Ç®")
    put("", "„Ç™")
    put("", "„Ç´")
    put("", "„Ç≠")
    put("", "„ÇØ")
    put("", "„Ç±")
    put("", "„Ç≥")
    put("", "„Ç≠„É£")
    put("", "„Ç≠„É•")
    put("", "„Ç≠„Éß")
    put("", "„Çµ")
    put("", "„Ç∑")
    put("", "„Çπ")
    put("", "„Çª")
    put("", "„ÇΩ")
    put("", "„Ç∑„É£")
    put("", "„Ç∑„É•")
    put("", "„Ç∑„Éß")
    put("", "„Çø")
    put("", "„ÉÅ")
    put("", "„ÉÑ")
    put("", "„ÉÜ")
    put("", "„Éà")
    put("", "„ÉÅ„É£")
    put("", "„ÉÅ„É•")
    put("", "„ÉÅ„Éß")
    put("", "„Éä")
    put("", "„Éã")
    put("", "„Éå")
    put("", "„Éç")
    put("", "„Éé")
    put("", "„Éã„É£")
    put("", "„Éã„É•")
    put("", "„Éã„Éß")
    put("", "„Éè")
    put("", "„Éí")
    put("", "„Éï")
    put("", "„Éò")
    put("", "„Éõ")
    put("", "„Éí„É£")
    put("", "„Éí„É•")
    put("", "„Éí„Éß")
    put("", "„Éû")
    put("", "„Éü")
    put("", "„É†")
    put("", "„É°")
    put("", "„É¢")
    put("", "„Éü„É£")
    put("", "„Éü„É•")
    put("", "„Éü„Éß")
    put("", "„É§")
    put("", "õÑ†")
    put("", "„É¶")
    put("", "„Ç®")
    put("", "„É®")
    put("", "„É©")
    put("", "„É™")
    put("", "„É´")
    put("", "„É¨")
    put("", "„É≠")
    put("", "„É™„É£")
    put("", "„É™„É•")
    put("", "„É™„Éß")
    put("", "„ÉØ")
    put("", "„É∞")
    put("", "õÑ¢")
    put("", "„É±")
    put("", "„É≤")
    put("", "„Ç¨")
    put("", "„ÇÆ")
    put("", "„Ç∞")
    put("", "„Ç≤")
    put("", "„Ç¥")
    put("", "„ÇÆ„É£")
    put("", "„ÇÆ„É•")
    put("", "„ÇÆ„Éß")
    put("", "„Ç∂")
    put("", "„Ç∏")
    put("", "„Ç∫")
    put("", "„Çº")
    put("", "„Çæ")
    put("", "„Ç∏„É£")
    put("", "„Ç∏„É•")
    put("", "„Ç∏„Éß")
    put("", "„ÉÄ")
    put("", "„ÉÇ")
    put("", "„ÉÖ")
    put("", "„Éá")
    put("", "„Éâ")
    put("", "„ÉÇ„É£")
    put("", "„ÉÇ„É•")
    put("", "„ÉÇ„Éß")
    put("", "„Éê")
    put("", "„Éì")
    put("", "„Éñ")
    put("", "„Éô")
    put("", "„Éú")
    put("", "„Éì„É£")
    put("", "„Éì„É•")
    put("", "„Éì„Éß")
    put("", "„Éë")
    put("", "„Éî")
    put("", "„Éó")
    put("", "„Éö")
    put("", "„Éù")
    put("", "„Éî„É£")
    put("", "„Éî„É•")
    put("", "„Éî„Éß")
    put("", "„É≥")
    put("", "")
    put("", "„Éø")
    put("", "")
    put("", "/")
    put("", "")
    put("", "")
    put("", "„Çô")
    put("", "„ÉÉ")
    put("", "„Éº")
    put("", "„ÉΩ")
    put("", "„Ä±")
    put("", "„Éæ")
    put("", "„Ä±„Çô")
    put("", "„ÉΩ„Çö")
    put("", "„Ä±„Çö")
}